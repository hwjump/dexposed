apply plugin: 'com.android.model.application'

model{
    android {
        compileSdkVersion = 22
        buildToolsVersion = "22.0.1"

        defaultConfig.with {
            applicationId = "com.taobao.dexposed.art"
            minSdkVersion.apiLevel = 10
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = "1.0"
        }
    }

    //when debug this pro, exclude libso in dexposed
    android.packagingOptions {
        pickFirst 'lib/armeabi-v7a/libdexposed_art_19_21.so'
        pickFirst 'lib/x86/libdexposed_art_19_21.so'

        pickFirst 'lib/armeabi-v7a/libdexposed_art_22.so'
        pickFirst 'lib/x86/libdexposed_art_22.so'
    }

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles += file('proguard-rules.pro')
        }
    }

    android.ndk {
        toolchain = "gcc"
        toolchainVersion = "4.9"

        moduleName = "dexposed_art_22"

        CFlags += ["-D_USING_LIBCXX", "-UNDEBUG","-O3", "-DDYNAMIC_ANNOTATIONS_ENABLED=1"]
        cppFlags += ["-std=c++0x", "-DANDROID_SMP=0", "-UNDEBUG","-O3", "-DDYNAMIC_ANNOTATIONS_ENABLED=1", "-DIMT_SIZE=64"]

        ldLibs += ["c++", "art", "cutils","utils", "log",  "m", "c", "atomic", "z", "art_quick_dexposed_invoke_handler"]
        stl = "c++_static" // libart.so extern std::__1::stream  so  use libc++

        abiFilters += ["x86"]
        abiFilters += ["armeabi-v7a"]
    }

    android.productFlavors {
        create("android_5.1") {
            ndk.with {
                moduleName = "dexposed_art_22"

                cppFlags += ["-DPLATFORM_SDK_VERSION=22" ]

                def android_branch = "android-5.1.0_r5";

                ldFlags += "-L${getRootDir()}/dexposed-AOSP/${android_branch}/jniLibs/x86".toString()
                ldFlags += "-L${getRootDir()}/dexposed-AOSP/${android_branch}/jniLibs/armeabi-v7a".toString()

                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/art".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/art/runtime".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/art/runtime/arch/arm".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/art/runtime/entrypoints/quick".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/external/gtest/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/external/valgrind/main".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/external/valgrind/main/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/external/libcxx/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/system/core/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/frameworks/base/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/frameworks/native/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/libnativehelper/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/libnativehelper/include/nativehelper".toString()
            }
        }

        create("android_5.0") {
            ndk.with {
                moduleName = "dexposed_art_19_21"

                cppFlags += ["-DPLATFORM_SDK_VERSION=21" ]

                def android_branch = "android-5.0.2_r3";

                ldFlags += "-L${getRootDir()}/dexposed-AOSP/${android_branch}/jniLibs/x86".toString()
                ldFlags += "-L${getRootDir()}/dexposed-AOSP/${android_branch}/jniLibs/armeabi-v7a".toString()

                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/art".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/art/runtime".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/art/runtime/arch/arm".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/art/runtime/entrypoints/quick".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/external/gtest/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/external/valgrind/main".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/external/valgrind/main/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/external/libcxx/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/system/core/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/frameworks/base/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/frameworks/native/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/libnativehelper/include".toString()
                cppFlags  += "-I${getRootDir()}/dexposed-AOSP/${android_branch}/include/libnativehelper/include/nativehelper".toString()

            }
        }
    }

}

dependencies {
    compile project(':dexposed')
    compile fileTree(dir: 'libs', include: ['*.jar'])
}


